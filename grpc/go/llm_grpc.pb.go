// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: llm.proto

package GenerateGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Generate_GenerateStream_FullMethodName = "/Generate/GenerateStream"
)

// GenerateClient is the client API for Generate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerateClient interface {
	GenerateStream(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (Generate_GenerateStreamClient, error)
}

type generateClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerateClient(cc grpc.ClientConnInterface) GenerateClient {
	return &generateClient{cc}
}

func (c *generateClient) GenerateStream(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (Generate_GenerateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Generate_ServiceDesc.Streams[0], Generate_GenerateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &generateGenerateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Generate_GenerateStreamClient interface {
	Recv() (*GenerateResponse, error)
	grpc.ClientStream
}

type generateGenerateStreamClient struct {
	grpc.ClientStream
}

func (x *generateGenerateStreamClient) Recv() (*GenerateResponse, error) {
	m := new(GenerateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GenerateServer is the server API for Generate service.
// All implementations must embed UnimplementedGenerateServer
// for forward compatibility
type GenerateServer interface {
	GenerateStream(*GenerateRequest, Generate_GenerateStreamServer) error
	mustEmbedUnimplementedGenerateServer()
}

// UnimplementedGenerateServer must be embedded to have forward compatible implementations.
type UnimplementedGenerateServer struct {
}

func (UnimplementedGenerateServer) GenerateStream(*GenerateRequest, Generate_GenerateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStream not implemented")
}
func (UnimplementedGenerateServer) mustEmbedUnimplementedGenerateServer() {}

// UnsafeGenerateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerateServer will
// result in compilation errors.
type UnsafeGenerateServer interface {
	mustEmbedUnimplementedGenerateServer()
}

func RegisterGenerateServer(s grpc.ServiceRegistrar, srv GenerateServer) {
	s.RegisterService(&Generate_ServiceDesc, srv)
}

func _Generate_GenerateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GenerateServer).GenerateStream(m, &generateGenerateStreamServer{stream})
}

type Generate_GenerateStreamServer interface {
	Send(*GenerateResponse) error
	grpc.ServerStream
}

type generateGenerateStreamServer struct {
	grpc.ServerStream
}

func (x *generateGenerateStreamServer) Send(m *GenerateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Generate_ServiceDesc is the grpc.ServiceDesc for Generate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Generate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Generate",
	HandlerType: (*GenerateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStream",
			Handler:       _Generate_GenerateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm.proto",
}
